@page "/gamehistory"
@using DrawbackChess.Classes
@using DrawbackChess.Components.Pages;
@using DrawbackChess.Classes.GameClasses;
@using DrawbackChess.Classes.DatabaseClasses
@using DrawbackChess.Components.IndividualComponents

<link href="css/gamemenu.css" rel="stylesheet" />
<link href="css/fonts.css" rel="stylesheet" />
<link href="css/GameHistory.css" rel="stylesheet" />
<link href="css/Game.css" rel="stylesheet" />
<link rel="stylesheet" href="css/layout-scrollable.css">

<div class="content">

    @if (games == null)
    {
        <p>Loading...</p>
    }
    else if (!games.Any())
    {
        <p>No previous games found.</p>
    }
    else
    {
        <ul class="list">
            @foreach (var game in games)
            {
                <li class="item showhim" style="color: white">

                    <strong>Game #@game.Id</strong><br />

                    <button @onclick="() => Watch(game)" class="menu-button">Rewatch Game</button>
                    <div class="showme">
                        <ChessBoardStatic FEN="@game.board"></ChessBoardStatic>
                    </div>
                </li>
            }
        </ul>
    }
</div>

@code {
    private List<GameObject> games;
    [Inject] private NavigationManager Navigation { get; set; }
    private int playTime = 5;
    [Inject] private IJSRuntime JS { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DatabaseService db = new DatabaseService();
        games = await db.GetGamesAsync();
        db.PrintAllGames();
        Console.WriteLine("games fetched");
        StateHasChanged();
    }

    public async void Watch(GameObject game)
    {
        Board board = Board.FromFEN(game.board);
        Console.WriteLine("Game players");
        Console.WriteLine(game.player1);
        Console.WriteLine(game.player2);
        Player player1 = Player.FromString(game.player1);
        Player player2 = Player.FromString(game.player2);
        ChessTimer WhiteTimer = new ChessTimer(playTime, "White");
        ChessTimer BlackTimer = new ChessTimer(playTime, "Black");

        //set the reamining time to the last timestamps added in the db
        if (game.TimeStamps != null)
        {
            Console.WriteLine(game.MoveHistory);
            Console.WriteLine(game.TimeStamps);
            string[] stamps = game.TimeStamps.Split(";");
            string timeWhite = stamps[stamps.Length - 3];
            string timeBlack = stamps[stamps.Length - 2];
            WhiteTimer.TimeLeft = TimeSpan.FromSeconds(Convert.ToInt64(timeWhite));
            BlackTimer.TimeLeft = TimeSpan.FromSeconds(Convert.ToInt64(timeBlack));
        }


        //punem in pozitia initiala ca sa putem reconsittui jocul
        board = new Board();
        board.SetupPieces();


        WatchGamePage.currentGame = new Game(board, player1, player2, WhiteTimer, BlackTimer);
        WatchGamePage.currentGame.current_turn = game.current_turn;

        Action refreshUI = async () => await InvokeAsync(StateHasChanged);
        WatchGamePage.currentGame.refreshUI = refreshUI;

        Console.WriteLine("trying to create movehistory from db");
        RecreateMoveHistory(game.MoveHistory);
        Console.WriteLine("printing recreated movehistory from db");
        Console.WriteLine(WatchGamePage.currentGame.moveHistory.ToString());
        Navigation.NavigateTo("/watch");
    }

    private void RecreateMoveHistory(string s)
    {
        string[] mutari = s.Split(';');
        foreach (string mutare in mutari)
        {
            string[] patrate = mutare.Split('.');
            Square s1 = Square.FromString(patrate[0]);
            Square s2 = Square.FromString(patrate[1]);
            Console.WriteLine(patrate[0] + "=>" + s1.row + " " + s1.col);
            Console.WriteLine(patrate[1] + "=>" + s2.row + " " + s2.col);
            Square StartSquare = WatchGamePage.currentGame.board.GetSquareAt(s1.row, s1.col);
            Square EndSquare = WatchGamePage.currentGame.board.GetSquareAt(s2.row, s2.col);
            WatchGamePage.currentGame.board.PrintCurrentState();
            if (MovementHandler.Try_Execute_Move(StartSquare,EndSquare,WatchGamePage.currentGame))
            {
                Console.WriteLine("recreated move");
            }
        }
    }
}