@page "/gamehistory"
@using DrawbackChess.Classes
@using DrawbackChess.Components.Pages;
@using DrawbackChess.Classes.GameClasses;
@using DrawbackChess.Classes.DatabaseClasses
@using DrawbackChess.Components.IndividualComponents

<link href="css/gamemenu.css" rel="stylesheet" />
<link href="css/fonts.css" rel="stylesheet" />
<link href="css/GameHistory.css" rel="stylesheet" />
<link href="css/Game.css" rel="stylesheet" />
<link rel="stylesheet" href="css/layout.css">

<div class="content">

    @if (games == null)
    {
        <p>Loading...</p>
    }
    else if (!games.Any())
    {
        <p>No previous games found.</p>
    }
    else
    {
        <ul class="list">
            @foreach (var game in games)
            {
                <li class="item showhim" style="color: white">

                    <strong>Game #@game.Id</strong><br />

                    <button @onclick="() => Rewatch(game)"  class="menu-button">Rewatch Game</button>
                     <div @onclick="() => Rewatch(game)" class="showme">
                        <ChessBoardStatic FEN="@game.board"></ChessBoardStatic>
                    </div>
                </li>
            }
        </ul>
    }
</div>

@code {
    private List<GameObject> games;
    [Inject] private NavigationManager Navigation { get; set; }
    private int playTime = 5;
    [Inject] private IJSRuntime JS { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DatabaseService db = new DatabaseService();
        games = await db.GetGamesAsync();
        db.PrintAllGames();
        Console.WriteLine("games fetched");
        StateHasChanged();
    }

    public async void Rewatch(GameObject game)
    {
        Board board = Board.FromFEN(game.board);

        Console.WriteLine("Game players");
        Console.WriteLine(game.player1);
        Console.WriteLine(game.player2);
        Player player1 = Player.FromString(game.player1);
        Player player2 = Player.FromString(game.player2);
        ChessTimer WhiteTimer = new ChessTimer(playTime, "White");
        ChessTimer BlackTimer = new ChessTimer(playTime, "Black");

        //set the reamining time to the last timestamps added in the db
        if (game.TimeStamps != null)
        {
            Console.WriteLine(game.MoveHistory);
            Console.WriteLine(game.TimeStamps);
            string[] stamps = game.TimeStamps.Split(";");
            string timeWhite = stamps[stamps.Length - 3];
            string timeBlack = stamps[stamps.Length - 2];
            WhiteTimer.TimeLeft = TimeSpan.FromSeconds(Convert.ToInt64(timeWhite));
            BlackTimer.TimeLeft = TimeSpan.FromSeconds(Convert.ToInt64(timeBlack));
        }

        GameMenu.currentGame = new Game(board, player1, player2, WhiteTimer, BlackTimer);
        GameMenu.currentGame.current_turn = game.current_turn;
        GamePage.readOnly = true; //we dont want the players to be able to make anuy moves
        Navigation.NavigateTo("/Game");
    }
}