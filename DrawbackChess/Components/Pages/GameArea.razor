@code {
    [Parameter] public Session? current_session { get; set; }

    private void OnSquareClick(Square clicked)
    {
        if (current_session.board.StartSquare == clicked)
        {
            current_session.board.DeselectPiece();
        }
        else
        {
            if (current_session.board.StartSquare == null)
            {
                current_session.board.TrySelectPieceOn(clicked);
            }
            else
            {
                if (current_session.board.Try_Execute_Move(clicked)) //if move was succesfull
                {
                    current_session.LookForWinner();
                    if(current_session.winner==null)
                        current_session.SwitchTimer();
                }
            }
        }
        StateHasChanged();
    }
}

<div class="column-labels">
    @for (char colName = 'A'; colName <= 'H'; colName++)
    {
        <div class="column-label">
            <span class="rotated">@colName</span>
        </div>
    }
</div>
<div class="chessarea">

    <div class="row-labels">
        @for (int row = 1; row <= 8; row++)
        {
            <div class="row-label">
                <label>@row</label>
            </div>
        }
    </div>

    <div class="chessboard">

        @for (int row = 1; row <= 8; row++)
        {

            @for (int col = 1; col <= 8; col++)
            {
                var square = current_session.board.grid[row, col];
                var isHighlighted = current_session.board.PossibleMoves.Contains(square); // Check if the square is a possible move

                <div class="square @(square.IsBlackSquare() ? "black" : "white")
                    @(square == current_session.board.StartSquare ? "selected" : "")
                    @(square == current_session.board.ChessHere ? "red" : "")
                    @(isHighlighted ? "highlight" : "")"
                     @onclick="() => OnSquareClick(square)">
                    @if (square.piece != null)
                    {
                        <img src="\images\@(square.piece.color.ToLower())_@(square.piece.type.ToLower()).png"
                             alt="@square.piece.type"
                             class="piece @(square.piece.color.ToLower() == "white" ? "rotated" : "")" />
                    }
                </div>
            }
        }
    </div>

    <div class="row-labels">
        @for (int row = 1; row <= 8; row++)
        {
            <div class="row-label rotated">
                <label>@row</label>
            </div>
        }
    </div>


</div>

<div class="column-labels">
    @for (char colName = 'A'; colName <= 'H'; colName++)
    {
        <div class="column-label">@colName</div>
    }
</div>