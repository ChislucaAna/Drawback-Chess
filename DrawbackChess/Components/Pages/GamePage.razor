@page "/game/{Player1Name}/{Player2Name}/{PlayTime:int}"
@using DrawbackChess.Classes
@using DrawbackChess.Components
@using DrawbackChess.Components.IndividualComponents
@using CommunityToolkit.Maui.Views;
<link href="css/Game.css" rel="stylesheet" />
<div class="content">

    <GameEndedPopup Title="Game Over" IsVisible="@Session.GameHasEnded()">
        @if (Session.typeofwin != "draw")
        {
            <p class="message">
                Game over! Game was won by @Session.winner.name by @Session.typeofwin.
            </p>
        }
        else
        {
            <p class="message">
                Game over! The game ended in a draw.
            </p>
        }
    </GameEndedPopup>

    <div class="gamearea">
        <PlayerInfo GameHasStarted="@Session.GameHasStarted()" player="@Session.player1" timer="@Session.WhiteTimer" rotate="true">
        </PlayerInfo>

        <ChessBoard></ChessBoard>

        <PlayerInfo GameHasStarted="@Session.GameHasStarted()" player="@Session.player2" timer="@Session.BlackTimer" rotate="false">
        </PlayerInfo>
    </div>
</div>

@code {
    //parametrii luati de la meniul de creare a jocului
    [Parameter] public string Player1Name { get; set; }
    [Parameter] public string Player2Name { get; set; }
    [Parameter] public int PlayTime { get; set; }
    string contents;

    protected override async void OnInitialized()
    {
        LoadDrawbacks();
        if (GameMenu.is_new_game)
        {
            Session.RemoveOldGameData();
            Session.board = new Board();
            Session current_session = new Session();
            TimeSpan timeSpan = TimeSpan.FromMinutes(PlayTime);
            Session.player1 = new Player(Player1Name, "White", new Drawback(contents));
            Session. player2 = new Player(Player2Name, "Black", new Drawback(contents));
            Session.refreshUI = async () => await InvokeAsync(StateHasChanged);
            Session.WhiteTimer = new ChessTimer(PlayTime,"White", () =>
            {
                InvokeAsync(StateHasChanged);
            });
            Session.BlackTimer = new ChessTimer(PlayTime,"Black", () =>
            {
                InvokeAsync(StateHasChanged);
            });
        }
    }

    public async void LoadDrawbacks() //loads all drawbacks possible
    {
        using var stream = await FileSystem.OpenAppPackageFileAsync("drawbacks.txt");
        using var reader = new StreamReader(stream);
        contents = reader.ReadToEnd();

        DrawbackHandler.InitDrawbacks();
    }

}


