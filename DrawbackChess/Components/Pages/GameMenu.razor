@page "/menu"
@using DrawbackChess.Classes
@using DrawbackChess.Components
@using DrawbackChess.Components.IndividualComponents
@using CommunityToolkit.Maui.Views;
<link href="css/gamemenu.css" rel="stylesheet" />

<div class="modal-overlay">
    <h3>Play on same device:</h3>
    <!-- Player Name Input -->
    <div class="form_field">
        <label>Player Name:</label>
        <input @bind="player1Name"/>
    </div>

    <div class="form_field">
        <label>Player Name:</label>
        <input @bind="player2Name"/>
    </div>

    <!-- Play Time Dropdown -->
    <div class="form_field">
        <label>Select Play Time (minutes):</label>
        <select @bind="playTime">
            <option value="1">1</option>
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="15">15</option>
            <option value="30">30</option>
        </select>
    </div>

<<<<<<< HEAD
    <button @onclick="StartGame" class="menu-button">Start New Game</button>
=======
    <button @onclick="StartNewGame" class="menu-button">Start New Game</button>
>>>>>>> 0b28d9be5a8283241a830a6b3ac1aa4b14f5b755
    <button @onclick="ContinueGame" class="menu-button">Continue Game</button>
</div>

<div class="modal-overlay">
    <h3>Play online:</h3>
    <!-- Player Name Input -->
    <div class="form_field">
        <label>Player Name:</label>
        <input @bind="player1Name" readonly="true" style="pointer-events: none;" />
    </div>

    <button @onclick="PlayOnline" class="menu-button">Play Online</button>
</div>


@code {

    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private IJSRuntime JS { get; set; }
    private bool showNewGamePopup = true;

    //Game creation settings
    private string player1Name = "White";
    private string player2Name = "Black";
    private int playTime = 5;
    public static bool is_new_game = false;

    //Game instance
    public static Game currentGame;

    protected override async void OnInitialized()
    {
        DrawbackHandler.InitDrawbacks();
    }

    // Open the New Game popup
    private void OpenNewGamePopup()
    {
        showNewGamePopup = !showNewGamePopup;
    }

    // Close the popup without starting
    private void CloseNewGamePopup()
    {
        showNewGamePopup = false;
    }

    // Start the game logic
    private void StartNewGame()
    {
        is_new_game = true;
        showNewGamePopup = false;
<<<<<<< HEAD
        if (player1Name.Length >= 1 && player2Name.Length >= 1)
            Navigation.NavigateTo($"/Game/{player1Name}/{player2Name}/{playTime}");

        if (player1Name.Length >= 1)
            Navigation.NavigateTo($"/Game/{player1Name}/{"Black"}/{playTime}");

        if (player2Name.Length >= 1)
            Navigation.NavigateTo($"/Game/{"White"}/{player2Name}/{playTime}");

        Navigation.NavigateTo($"/Game/{"White"}/{"Black"}/{playTime}");
    }

    public void ContinueGame()
    {
        is_new_game = false;
        Navigation.NavigateTo($"/Game/{"White"}/{"Black"}/{0}");
    }

=======
        Board board = new Board();
        Player player1 = new Player(player1Name, "White", new Drawback());
        Player player2 = new Player(player1Name, "Black", new Drawback());
        ChessTimer WhiteTimer = new ChessTimer(playTime, "White");
        ChessTimer BlackTimer = new ChessTimer(playTime, "Black");
        currentGame = new Game(board, player1, player2, WhiteTimer, BlackTimer);
        Navigation.NavigateTo("/Game");
    }

    public async void ContinueGame()
    {
        is_new_game = false;
        List<Game> games = await DatabaseService.Instance.GetGamesAsync();
        if (games.Any())
        {
            Game lastGame = games.Last();
            lastGame.Deserialize();
            currentGame = new Game(lastGame.board, lastGame.player1, lastGame.player2, lastGame.WhiteTimer, lastGame.BlackTimer);
        }
        else
        {
            Console.WriteLine("There arent any previous games");
        }
        Navigation.NavigateTo("/Game");
    }
>>>>>>> 0b28d9be5a8283241a830a6b3ac1aa4b14f5b755

    private async void PlayOnline()
    {
        await JS.InvokeVoidAsync("alert", "This feature is currently not available.");
    }
}
