@page "/menu"
@using DrawbackChess.Classes
@using DrawbackChess.Components
@using DrawbackChess.Components.IndividualComponents
@using CommunityToolkit.Maui.Views;
@using DrawbackChess.Classes.DatabaseClasses;
@using DrawbackChess.Classes.GameClasses;
<link href="css/gamemenu.css" rel="stylesheet" />

<div class="modal-overlay">
    <h3>Play on same device:</h3>
    <!-- Player Name Input -->
    <div class="form_field">
        <label>Player Name:</label>
        <input @bind="player1Name"/>
    </div>

    <div class="form_field">
        <label>Player Name:</label>
        <input @bind="player2Name"/>
    </div>

    <!-- Play Time Dropdown -->
    <div class="form_field">
        <label>Select Play Time (minutes):</label>
        <select @bind="playTime">
            <option value="1">1</option>
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="15">15</option>
            <option value="30">30</option>
        </select>
    </div>

    <button @onclick="StartNewGame" class="menu-button">Start New Game</button>
    <button @onclick="ContinueGame" class="menu-button">Continue Game</button>
</div>

<div class="modal-overlay">
    <h3>Play online:</h3>
    <!-- Player Name Input -->
    <div class="form_field">
        <label>Player Name:</label>
        <input @bind="playerNameOnline" readonly="true" style="pointer-events: none;" />
    </div>

    <button @onclick="PlayOnline" class="menu-button">Play Online</button>
</div>


<div class="overlay" id="popup" style="@(lookingForMatch==true && matchFound==false ? "" : "display: none;")">
    <div class="popup-content">
        <p>Searching for a match...</p>
    </div>
</div>


@code {

    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private IJSRuntime JS { get; set; }
    private bool showNewGamePopup = true;

    //Game creation settings
    private string player1Name = "White";
    private string player2Name = "Black";
    private string playerNameOnline = "Chess Prodigy";
    private int playTime = 5;

    //for Showing popup
    public static bool lookingForMatch = false;
    public static bool matchFound = false;


    //Game instance
    public static Game currentGame;
    public static Online session;

    protected override async void OnInitialized()
    {
        DrawbackHandler.InitDrawbacks();
    }

    // Open the New Game popup
    private void OpenNewGamePopup()
    {
        showNewGamePopup = !showNewGamePopup;
    }

    // Close the popup without starting
    private void CloseNewGamePopup()
    {
        showNewGamePopup = false;
    }

    // Start the game logic
    private void StartNewGame()
    {
        showNewGamePopup = false;
        Board board = new Board();
        Player player1 = new Player(player1Name, "White", new Drawback());
        Player player2 = new Player(player1Name, "Black", new Drawback());
        ChessTimer WhiteTimer = new ChessTimer(playTime, "White");
        ChessTimer BlackTimer = new ChessTimer(playTime, "Black");
        currentGame = new Game(board, player1, player2, WhiteTimer, BlackTimer);
        Navigation.NavigateTo("/Game");
    }

    public async void ContinueGame()
    {
        DatabaseService db = new DatabaseService();
        List<GameObject> games = await db.GetGamesAsync();
        if (games.Any())
        {
            GameObject lastGame = games.Last();
            Board board = Board.FromFEN(lastGame.board);
            Player player1 = Player.FromString(lastGame.player1);
            Player player2 = Player.FromString(lastGame.player2);
            ChessTimer WhiteTimer = new ChessTimer(playTime, "White");
            ChessTimer BlackTimer = new ChessTimer(playTime, "Black");
            currentGame = new Game(board, player1, player2, WhiteTimer, BlackTimer);
            currentGame.current_turn = lastGame.current_turn;
            Navigation.NavigateTo("/Game");
        }
        else
        {
            Console.WriteLine("There arent any previous games");
        }
        Navigation.NavigateTo("/Game");
    }

    private async void PlayOnline()
    {
        string uwu =await Online.wait();
        Console.WriteLine(uwu);
        showNewGamePopup = false;
        Board board = new Board();
        Drawback player1Drawback = new Drawback();
        Player player1 = new Player(player1Name, "White", player1Drawback);

        ChessTimer WhiteTimer = new ChessTimer(playTime, "White");
        ChessTimer BlackTimer = new ChessTimer(playTime, "Black");

        session = new Online(playerNameOnline, player1Drawback.type, player1Drawback.parameter);


        Drawback player2Drawback = new Drawback(null, session.drawback2, session.parameter2);
        Player player2 = new Player(session.player2, "Black", player2Drawback);

        currentGame = new Game(board, player1, player2, WhiteTimer, BlackTimer);
        Navigation.NavigateTo("/gameonline");
    }
}
