@page "/menu"
@using DrawbackChess.Classes
@using DrawbackChess.Components
@using DrawbackChess.Components.IndividualComponents
@using CommunityToolkit.Maui.Views;
@using DrawbackChess.Classes.DatabaseClasses;
@using DrawbackChess.Classes.GameClasses;
<link href="css/gamemenu.css" rel="stylesheet" />

<div class="modal-overlay">
    <h3>Play on same device:</h3>
    <!-- Player Name Input -->
    <div class="form_field">
        <label>Player Name:</label>
        <input @bind="player1Name"/>
    </div>

    <div class="form_field">
        <label>Player Name:</label>
        <input @bind="player2Name"/>
    </div>

    <!-- Play Time Dropdown -->
    <div class="form_field">
        <label>Select Play Time (minutes):</label>
        <select @bind="playTime">
            <option value="1">1</option>
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="15">15</option>
            <option value="30">30</option>
        </select>
    </div>

    <button @onclick="StartNewGame" class="menu-button">Start New Game</button>
    <button @onclick="ContinueGame" class="menu-button">Continue Game</button>
</div>

<div class="modal-overlay">
    <h3>Play online:</h3>
    <!-- Player Name Input -->
    <div class="form_field">
        <label>Player Name:</label>
        <input @bind="player1Name" readonly="true" style="pointer-events: none;" />
    </div>

    <button @onclick="PlayOnline" class="menu-button">Play Online</button>
</div>


@code {

    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private IJSRuntime JS { get; set; }
    private bool showNewGamePopup = true;

    //Game creation settings
    private string player1Name = "White";
    private string player2Name = "Black";
    private int playTime = 5;
    DatabaseService db;

    //Game instance
    public static Game currentGame;

    protected override async void OnInitialized()
    {
        DrawbackHandler.InitDrawbacks();
    }

    // Open the New Game popup
    private void OpenNewGamePopup()
    {
        showNewGamePopup = !showNewGamePopup;
    }

    // Close the popup without starting
    private void CloseNewGamePopup()
    {
        showNewGamePopup = false;
    }

    // Start the game logic
    private void StartNewGame()
    {
        db = new DatabaseService();
        test();

        showNewGamePopup = false;
        Board board = new Board();
        Player player1 = new Player(player1Name, "White", new Drawback());
        Player player2 = new Player(player1Name, "Black", new Drawback());
        ChessTimer WhiteTimer = new ChessTimer(playTime, "White");
        ChessTimer BlackTimer = new ChessTimer(playTime, "Black");
        currentGame = new Game(board, player1, player2, WhiteTimer, BlackTimer);
        Navigation.NavigateTo("/Game");
    }

    public async void test()
    {
        try
        {
            Console.WriteLine("Inserting a new blog");
            db = new DatabaseService();
            await db.SaveItemAsync(new Test("salut"));
            List<Test> list = await db.GetItemsAsync();
            foreach(var item in list)
            {
                Console.WriteLine(item.Message);
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
                if (ex.InnerException != null)
                {
                    Console.WriteLine("Inner Exception: " + ex.InnerException.Message);
                }
        }

    }

    public async void ContinueGame()
    {
        /*List<Game> games = await DatabaseService.Instance.GetGamesAsync();
        if (games.Any())
        {
            Game lastGame = games.Last();
            lastGame.Deserialize();
            currentGame = new Game(lastGame.board, lastGame.player1, lastGame.player2, lastGame.WhiteTimer, lastGame.BlackTimer);
        }
        else
        {
            Console.WriteLine("There arent any previous games");
        }
        Navigation.NavigateTo("/Game");*/
    }

    private async void PlayOnline()
    {
        await JS.InvokeVoidAsync("alert", "This feature is currently not available.");
    }
}
