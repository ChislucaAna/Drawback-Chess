@using DrawbackChess.Classes
@using DrawbackChess.Components.Pages;
@using DrawbackChess.Classes.GameClasses;
@using DrawbackChess.Classes.DatabaseClasses
<!--we rotate the whole page if we are playing white-->
<div class="chessboard_full @((GameMenu.session.getMyColor()=="White") ? "rotated" : "") ">
    <div class="column-labels">
        @for (char colName = 'A'; colName <= 'H'; colName++)
        {
            <div class="column-label rotated">
                <span>@colName</span>
            </div>
        }
    </div>
    <div class="chessarea">

        <div class="row-labels">
            @for (int row = 1; row <= 8; row++)
            {
                <div class="row-label">
                    <span>@row</span>
                </div>
            }
        </div>

        <div class="chessboard">

            @for (int row = 1; row <= 8; row++)
            {

                @for (int col = 1; col <= 8; col++)
                {
                    var square = GameMenu.currentGame.board.grid[row, col];
                    var isHighlighted = MovementHandler.PossibleMoves.Contains(square); // Check if the square is a possible move for the currently selected piece

                    <div class="square @(square.IsBlackSquare() ? "black" : "white")
                    @(square == StartSquare ? "selected" : "")
                    @(GameMenu.currentGame.board.KingIsInCheck(GameMenu.currentGame.current_turn)
                    &&  square==GameMenu.currentGame.board.GetKingPosition(GameMenu.currentGame.current_turn)? "red" : "")
                    @(isHighlighted ? "highlight" : "")"
                    @onclick="() => OnSquareClick(square)">
                        @if (square.piece != null)
                        {
                            <img src="\images\@(square.piece.color.ToLower())_@(square.piece.type.ToLower()).png"
                            alt="@square.piece.type" class="piece @(GameMenu.session.getMyColor() == "White" ? "rotated" : "")" />
                            //no rotated pieces in online game mode
                        }
                    </div>
                }
            }
        </div>

        <div class="row-labels">
            @for (int row = 1; row <= 8; row++)
            {
                <div class="row-label rotated">
                    <span>@row</span>
                </div>
            }
        </div>


    </div>

    <div class="column-labels">
        @for (char colName = 'A'; colName <= 'H'; colName++)
        {
            <div class="column-label">
                <span>
                    @colName
                </span>
            </div>
        }
    </div>
</div>

@code {
    protected override async void OnInitialized()
    {
        GameMenu.currentGame.board.refreshUI = StateHasChanged;
        GameMenu.currentGame.board = GameMenu.session.getBoard();
        GameMenu.currentGame.current_turn = GameMenu.session.getCurrentTurn();
        GameMenu.session.updateTimer(GameMenu.currentGame);
        if (GameMenu.session.getCurrentTurn() != GameMenu.session.getMyColor())
        {
            await GameMenu.session.waitEnemyTurn();
            GameMenu.currentGame.board = GameMenu.session.getBoard();
            GameMenu.session.updateTimer(GameMenu.currentGame);
            GameMenu.currentGame.SwitchTurn();
            GameMenu.currentGame.SwitchTimer();
        }

        if (GameMenu.session.getMyColor() == "White")
        {
            myTimer = GameMenu.currentGame.WhiteTimer;
            myColor = "white";
        }
        else
        {
            myTimer = GameMenu.currentGame.BlackTimer;
            myColor = "black";
        }
        StateHasChanged();
    }

    public static Square StartSquare;
    public static Square EndSquare;
    public GameObject currentState;
    public ChessTimer myTimer;
    public string myColor;

    private async void OnSquareClick(Square clicked)
    {
        if (GameMenu.session.getCurrentTurn() != GameMenu.session.getMyColor()) return;
        //No pieces can be moved after ending of game
        if (GameMenu.currentGame.GameHasEnded())
        {
            return;
        }

        //Clicked on same piece deselect it.
        if (StartSquare == clicked)
        {
            DeselectPiece();
        }

        //Nothing previously clicked so select new piece
        if (StartSquare == null)
        {
            TrySelectPieceOn(clicked);;
        }

        //Clicked on owned piece, try to move selection to new piece
        if (clicked.get_piece_color() == GameMenu.currentGame.current_turn)
        {
            DeselectPiece();
            TrySelectPieceOn(clicked);
        }

        //Clicked on possible move with selected piece try to execute move
        EndSquare = clicked;
        if (MovementHandler.Try_Execute_Move(StartSquare, EndSquare, GameMenu.currentGame))
        {
            if (GameMenu.currentGame.winner != null)
            {
                GameMenu.session.sendMove(GameMenu.currentGame.board, myTimer, myColor);
                GameMenu.session.updateTimer(GameMenu.currentGame);
                GameMenu.session.declareWinner(GameMenu.currentGame.winner.color);
                GameMenu.session.switchTurn();
                Save(); //salveaza remote
                await GameMenu.session.endGame();
            }
            else
            {
                GameMenu.session.sendMove(GameMenu.currentGame.board, myTimer, myColor);
                GameMenu.session.updateTimer(GameMenu.currentGame);
                ClearMovementData();
                GameMenu.session.switchTurn();
                StateHasChanged();

                string result = await GameMenu.session.waitEnemyTurn();
                GameMenu.currentGame.board = GameMenu.session.getBoard();
                if (result != "none")
                {
                    if (result == "White")
                        GameMenu.currentGame.winner = GameMenu.currentGame.player1;
                    else
                        GameMenu.currentGame.winner = GameMenu.currentGame.player2;
                    GameMenu.currentGame.EndGame();
                    //End game locally
                }

                GameMenu.currentGame.SwitchTurn();
                GameMenu.currentGame.SwitchTimer();
            }
        }
        StateHasChanged();
    }

    public async void Save()
    {   
        //Save to online db
        var g = GameMenu.currentGame;
        //save timestamps first because this method is called after every move
        g.TimeStamps += g.WhiteTimer.TimeLeft.TotalSeconds.ToString();
        g.TimeStamps += ";";
        g.TimeStamps += g.BlackTimer.TimeLeft.TotalSeconds.ToString();
        g.TimeStamps += ";";

        currentState = new GameObject(g.current_turn, g.typeofwin, Board.ToFEN(g.board),
        g.player1.ToString(), g.player2.ToString(), g.LookForWinner(), g.moveHistory.ToString(), g.TimeStamps);

        Console.WriteLine(await GameMenu.session.SaveRemote(currentState));
    }

    public static void DeselectPiece()
    {
        StartSquare = null;
        MovementHandler.PossibleMoves.Clear();
    }

    public static void TrySelectPieceOn(Square s)
    {
        if (CanSelect(s))
        {
            StartSquare = s;
        }
    }

    public static bool CanSelect(Square s)
    {
        if (s.piece == null)
            return false; //there is no piece to select on this square
        if (GameMenu.currentGame.current_turn != s.get_piece_color())
            return false; //it s not this player's turn yet
        return true; //all is good
    }
    public static void ClearMovementData()
    {
        Console.WriteLine("Movement data has been cleaned");
        StartSquare = null;
        EndSquare = null;
    }

}
