@using DrawbackChess.Classes
<div class="column-labels">
    @for (char colName = 'A'; colName <= 'H'; colName++)
    {
        <div class="column-label">
            <span class="rotated">@colName</span>
        </div>
    }
</div>
<div class="chessarea">

    <div class="row-labels">
        @for (int row = 1; row <= 8; row++)
        {
            <div class="row-label">
                <label>@row</label>
            </div>
        }
    </div>

    <div class="chessboard">

        @for (int row = 1; row <= 8; row++)
        {

            @for (int col = 1; col <= 8; col++)
            {
                var square = Board.grid[row, col];
                var isHighlighted = MovementHandler.PossibleMoves.Contains(square); // Check if the square is a possible move for the currently selected piece

                <div class="square @(square.IsBlackSquare() ? "black" : "white")
                    @(square == MovementHandler.StartSquare ? "selected" : "")
                    @(Board.KingIsInCheck(Board.current_turn) &&  square==Board.GetKingPosition(Board.current_turn)? "red" : "")
                    @(isHighlighted ? "highlight" : "")"
                @onclick="() => OnSquareClick(square)">
                    @if (square.piece != null)
                    {
                        <img src="\images\@(square.piece.color.ToLower())_@(square.piece.type.ToLower()).png"
                        alt="@square.piece.type"
                        class="piece @(square.piece.color.ToLower() == "white" ? "rotated" : "")" />
                    }
                </div>
            }
        }
    </div>

    <div class="row-labels">
        @for (int row = 1; row <= 8; row++)
        {
            <div class="row-label rotated">
                <label>@row</label>
            </div>
        }
    </div>


</div>

<div class="column-labels">
    @for (char colName = 'A'; colName <= 'H'; colName++)
    {
        <div class="column-label">@colName</div>
    }
</div>

@code {
    protected override void OnInitialized()
    {
        Board.refreshUI = StateHasChanged;
    }

    private void OnSquareClick(Square clicked)
    {
        //No pieces can be moved after ending of game
        if (Session.GameHasEnded())
        {
            Console.WriteLine("The game has already ended");
            return;
        }

        //Clicked on same piece deselect it.
        if (MovementHandler.StartSquare == clicked)
        {
            MovementHandler.DeselectPiece();
        }

        //Nothing previously clicked so select new piece
        if (MovementHandler.StartSquare == null)
        {
            MovementHandler.TrySelectPieceOn(clicked);
        }

        //Clicked on owned piece, try to move selection to new piece
        if (clicked.get_piece_color() == Session.GetTurnPlayerColor())
        {
            MovementHandler.DeselectPiece();
            MovementHandler.TrySelectPieceOn(clicked);
        }

        //Clicked on possible move with selected piece try to execute move
        MovementHandler.EndSquare = clicked;
        if (MovementHandler.Try_Execute_Move())
        {
            Session.LookForWinner();
            if (Session.winner == null)
                Session.SwitchTimer();
        }
        StateHasChanged();
    }
}
