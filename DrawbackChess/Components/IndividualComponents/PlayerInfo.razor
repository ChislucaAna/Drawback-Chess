@using DrawbackChess.Classes
@using DrawbackChess.Components.Pages;
@using DrawbackChess.Classes.GameClasses;
@code {
    [Parameter] public Player? player { get; set; }
    [Parameter] public ChessTimer? timer { get; set; }
    [Parameter] public bool rotate { get; set; }
    [Parameter] public bool GameHasStarted { get; set; }
}
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<link href="css/PlayerInfo.css" rel="stylesheet">
<div class="session_info @(rotate ? "rotated" : "")">
    <p>@player.name</p>

    <p class="digital-timer @(GameHasStarted && !timer.isPaused ? "timer-glow" : "")">
        @timer.TimeLeft
    </p>

    <div class="options">
        <button @onclick="ToggleDrawbackVisibility" class="toggle-drawback-btn">
            <i class="fa @(isDrawbackVisible ? "fal  fa-eye-slash" : "fal  fa-eye")"></i>
        </button>
        <button @onclick="ReverseLastMove" class="toggle-drawback-btn">
            <i class="fa fal fa-arrow-left"></i>
        </button>
        <p class="drawback-text" style="@(isDrawbackVisible ? "" : "display: none;")">
            @player.drawback.text
        </p>
    </div>
</div>

@code {
    private bool isDrawbackVisible = false;

    private void ToggleDrawbackVisibility()
    {
        isDrawbackVisible = !isDrawbackVisible;
    }

    private void ReverseLastMove()
    {
        //we can only reverse a move after we made it and the turn has been switched, 
        // we cannot reverse a move before the game has started or after it has ended
        if (player.color == GameMenu.currentGame.current_turn ||
        !GameMenu.currentGame.GameHasStarted() || GameMenu.currentGame.GameHasEnded()) return;

        //in a currently developing game, we want the move to be taken out of the move history
        //as if the player never made it, while in a game that we are just watching, we want to
        //just skim through the game moves, not modify the movehistory of the game
        MovementHandler.ReverseLastMoveOfPlayer(player.color, GameMenu.currentGame);
        GameMenu.currentGame.moveHistory.RemoveLastMoveOfPlayer(player.color);
        GameMenu.currentGame.board.PrintCurrentState();

        GameMenu.currentGame.SwitchTurn();
        GameMenu.currentGame.SwitchTimer();
        GameMenu.currentGame.board.refreshUI();
    }
}
