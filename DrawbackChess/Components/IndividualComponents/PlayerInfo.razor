@using DrawbackChess.Classes
@code {
    [Parameter] public DrawbackChess.Classes.Player? player { get; set; }
    [Parameter] public DrawbackChess.Classes.ChessTimer? timer { get; set; }
    [Parameter] public bool rotate { get; set; }
    [Parameter] public bool GameHasStarted { get; set; }
}
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<div class="session_info @(rotate ? "rotated" : "")">
    <p>@player.name</p>
    <p class="digital-timer @(GameHasStarted && !timer.isPaused ? "timer-glow" : "")">
        @timer.TimeLeft
    </p>
    <div>
        <button @onclick="ToggleDrawbackVisibility" class="toggle-drawback-btn">
            <i class="fa @(isDrawbackVisible ? "fal  fa-eye-slash" : "fal  fa-eye")"></i>
        </button>
        <button @onclick="ReverseLastMove" class="toggle-drawback-btn">
            <i class="fa fal fa-arrow-left"></i>
        </button>
        <p class="drawback-text" style="@(isDrawbackVisible ? "" : "display: none;")">
            @player.drawback.text
        </p>
    </div>
</div>

@code {
    private bool isDrawbackVisible = false;

    private void ToggleDrawbackVisibility()
    {
        isDrawbackVisible = !isDrawbackVisible;
    }

    private void ReverseLastMove()
    {
        if (!Session.GameHasEnded())
        {
            if (MoveHistory.GetLastMove().piece.color == player.color)
            {
                MovementHandler.ReverseLastMoveOfPlayer(player.color);
                MoveHistory.RemoveLastMoveOfPlayer(player.color);
                Board.PrintCurrentState();

                Board.SwitchTurn();
                Session.SwitchTimer();
                Board.refreshUI();
            }
        }
    }
}
